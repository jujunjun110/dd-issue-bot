# Coding Rules

- DO NOT WRITE ANY COMMENTS!!
- This is Deno project
- Respond with Japanese
- Read README.md to understand the requirements
- Write in functional style
  - Minimize use of variable definitions and reassignments with let
  - Minimize use of for loops
- Minimize use of else clauses
  - Avoid using them as they increase cognitive load
  - Even when necessary, try to eliminate else clauses using ternary operators or by extracting logic into functions
- Use dependency injection
  - Initialize all classes at the entry point and pass them to other classes
  - Write interfaces for clients that depend on external systems to make dependent classes testable
- Write tests for each work unit to verify correctness
  - Use deno test
  - For cases where test results cannot be read from standard output, output the test results to ./commandResult.txt as a file and read from it
    - Example: `deno test tests/llmQueries/formatMessagesQuery.test.ts > ./commandResult.txt 2>&1`
- Stay focused on the assigned work unit
  - Work instructions should be module-based, so focus on completing that module without touching others
- Generally avoid writing Docs and Comments
  - As this is not a public library and users are assumed to have high code comprehension, docs and comments are generally not needed
  - Only include them when implementation intent is special
- Use neverthrow for error handling
  - Use neverthrow at error occurrence points when possible
  - Handle errors procedurally rather than using Railway Oriented Programming to maintain readability
- Use Usecase pattern on server-side
  - Always initialize usecase class at API entry points, execute it, and format the response
  - Usecase classes should have dependencies injected via constructor and an execute method for execution
